name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('src/backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd src/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend unit tests
      run: |
        cd src/backend
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Run backend integration tests
      run: |
        cd src/backend
        pytest tests/integration/ -v --cov=. --cov-report=xml --cov-report=html
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./src/backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Run frontend unit tests
      run: npm run test:unit
    
    - name: Run frontend unit tests with coverage
      run: npm run test:coverage
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Start development server
      run: npm run dev &
    
    - name: Wait for server to be ready
      run: npx wait-on http://localhost:3000
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start development server
      run: npm run dev &
    
    - name: Wait for server to be ready
      run: npx wait-on http://localhost:3000
    
    - name: Run security tests
      run: npm run test:security
      continue-on-error: true
    
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: security-report/
        retention-days: 30

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start development server
      run: npm run dev &
    
    - name: Wait for server to be ready
      run: npx wait-on http://localhost:3000
    
    - name: Run performance tests
      run: npm run test:performance
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-report
        path: artillery-report/
        retention-days: 30

  # Infrastructure Tests
  infrastructure-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Run infrastructure tests
      run: npm run test:infrastructure

  # Quality Gates
  quality-gates:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-tests, performance-tests, infrastructure-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        path: test-results/
    
    - name: Check test coverage thresholds
      run: |
        # Check backend coverage (should be >= 90%)
        if [ -f "src/backend/htmlcov/index.html" ]; then
          echo "Backend coverage report generated"
        else
          echo "Backend coverage report not found"
          exit 1
        fi
        
        # Check frontend coverage (should be >= 85%)
        if [ -f "coverage/coverage-final.json" ]; then
          echo "Frontend coverage report generated"
        else
          echo "Frontend coverage report not found"
          exit 1
        fi
    
    - name: Check security test results
      run: |
        if [ -d "test-results/security-report" ]; then
          echo "Security tests completed"
        else
          echo "Security tests failed or incomplete"
          exit 1
        fi
    
    - name: Check performance test results
      run: |
        if [ -d "test-results/performance-report" ]; then
          echo "Performance tests completed"
        else
          echo "Performance tests failed or incomplete"
          exit 1
        fi
    
    - name: All tests passed
      run: echo "✅ All quality gates passed successfully!"

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.quality-gates.result == 'success'
      run: |
        echo "🎉 All tests passed successfully!"
        echo "Backend coverage: ✅"
        echo "Frontend coverage: ✅"
        echo "E2E tests: ✅"
        echo "Security tests: ✅"
        echo "Performance tests: ✅"
        echo "Infrastructure tests: ✅"
    
    - name: Notify on failure
      if: needs.quality-gates.result == 'failure'
      run: |
        echo "❌ Some tests failed!"
        echo "Please check the test results above for details."
        exit 1 